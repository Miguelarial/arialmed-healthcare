# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
      - main  # Automatically triggers the pipeline for commits to the 'main' branch

pool:
  vmImage: ubuntu-latest

variables:
  - group: ArialmedEnvironmentVariables  # Created a new variable group
  - name: bkstrgrg
    value: 'arialmed-backend'
  - name: bkstrg
    value: 'arialmeddb'
  - name: bkcontainer
    value: 'tfstate'
  - name: bkstrgkey
    value: 'terraform.tfstate'

stages:
  - stage: InstallNodeAndDependencies
    displayName: "Install Node.js and Dependencies"
    jobs:
      - job: SetupEnvironment
        displayName: "Set up Node.js and Build App"
        steps:
          - task: NodeTool@0
            displayName: "Install Node.js (v18)"
            inputs:
              versionSpec: '18'

          - script: |
              npm ci
            displayName: "Install Dependencies"

          - script: |
              npm run build
            displayName: "Build Application"

  - stage: tfvalidate
    displayName: "Terraform Validation"
    dependsOn: InstallNodeAndDependencies
    jobs:
      - job: validate
        displayName: "Validate Terraform Configuration"
        steps:
          - task: TerraformInstaller@1
            displayName: "Install Terraform"
            inputs:
              terraformVersion: 'latest'

          - task: TerraformTaskV4@4
            displayName: "Initialize Terraform"
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: 'terraform'
              backendServiceArm: 'arialmed-sc'
              backendAzureRmResourceGroupName: '$(bkstrgrg)'
              backendAzureRmStorageAccountName: '$(bkstrg)'
              backendAzureRmContainerName: '$(bkcontainer)'
              backendAzureRmKey: '$(bkstrgkey)'

          - task: TerraformTaskV4@4
            displayName: "Validate Terraform"
            inputs:
              provider: 'azurerm'
              command: 'validate'
              workingDirectory: 'terraform'

  - stage: tfdeploy
    displayName: "Terraform Deployment"
    dependsOn: tfvalidate
    condition: succeeded('tfvalidate')
    jobs:
      - job: apply
        displayName: "Apply Terraform Configuration"
        steps:
          - task: TerraformInstaller@1
            displayName: "Install Terraform"
            inputs:
              terraformVersion: 'latest'

          - task: TerraformTaskV4@4
            displayName: "Initialize Terraform"
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: 'terraform'
              backendServiceArm: 'arialmed-sc'
              backendAzureRmResourceGroupName: '$(bkstrgrg)'
              backendAzureRmStorageAccountName: '$(bkstrg)'
              backendAzureRmContainerName: '$(bkcontainer)'
              backendAzureRmKey: '$(bkstrgkey)'

          - task: TerraformTaskV4@4
            displayName: "Plan Terraform Deployment"
            inputs:
              provider: 'azurerm'
              command: 'plan'
              commandOptions: "-out=tfplan -lock-timeout=10m -detailed-exitcode"
              workingDirectory: 'terraform'
              environmentServiceNameAzureRM: 'arialmed-sc'

          - task: TerraformTaskV4@4
            displayName: "Apply Terraform Deployment"
            inputs:
              provider: 'azurerm'
              command: 'apply'
              commandOptions: "tfplan"
              workingDirectory: 'terraform'
              environmentServiceNameAzureRM: 'arialmed-sc'
